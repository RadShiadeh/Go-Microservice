Building a microservice in GoLang, retieving the prices of some crypto assets
Decorator pattern is used, so if I need to change the logic, I dont touch any other functionalities such as logging in the process
in this microservice everything will be written in the root package (main) to avoid circular dependency


Service:
service.go has a priceGetter interface and the function GetPrices... initially the service uses a mock prices map, and a function MockPriceAPICall to simulate getting the price from an API
Purpose: This file contains the core "business" logic of your microservice. It handles the logic for fetching cryptocurrency prices.


logging:
logginService struct is wrapper to PriceGetter interface using the key word "next"
LogGetPrice: function that logs the execution of GetPrice in service.go AFTER it wwas executed using the defer keyword, using the logrus library
Purpose: This file adds logging functionality this microservice. It wraps the price fetching logic in a logging service to track the time taken to execute and log the result.
sirupsen/logrus for logging in login.go


API
defines a simple http server that will retrieve a price using the PriceGetter service and return the json format to the user
A higher order function makeHTTPAPIFun takes a defined function for handling api requests (APIFun) and converts  it to http.HandlerFunc (used by go HTTP srver). This returns a response in JSON format with key and price
HandleFetchPrice method, handles the logic of getting the price
WriteJson simply uses a predefined struct to send JSON back
NEWJSONServer constructor create a new instance of JSONAPIServer with listenAddr (port) and service PriceGetter (interface)